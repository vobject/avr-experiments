#ifndef BTN6_HPP
#define BTN6_HPP

#include "Note.hpp"
#include "Song.hpp"

// Gummibaerenbande Theme
static Note btn6_notes[] =
{
   Note( nt_E_1, nl_Quarter ),
   Note( nt_C_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_A_1, nl_Quarter ),
   Note( nt_H_1, nl_Quarter ),
   Note( nt_C_2, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_A_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_F_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_F_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_D_1, nl_Quarter ),
   Note( nt_G_1, nl_Half    ),
   
   Note( nt_E_1, nl_Quarter ),
   Note( nt_C_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_A_1, nl_Quarter ),
   Note( nt_H_1, nl_Quarter ),
   Note( nt_C_2, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_A_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_F_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_A_1, nl_Quarter ),
   Note( nt_H_1, nl_Quarter ),
   Note( nt_C_2, nl_Quarter ),
   Note( nt_D_2, nl_Half    ),

   // Refrain
   Note( nt_E_1, nl_Quarter ),
   Note( nt_F_1, nl_Eighth  ),
   Note( nt_G_1, nl_Eighth  ),
   Note( nt_G_1, nl_QuarterDot ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_F_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_C_1, nl_Eighth ),
   Note( nt_C_1, nl_QuarterDot ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_F_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_C_1, nl_Eighth ),
   Note( nt_C_1, nl_QuarterDot ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_F_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   Note( nt_D_1, nl_Eighth ),
   Note( nt_D_1, nl_Eighth ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_C_1, nl_Eighth ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_F_1, nl_Quarter ),
   Note( nt_D_1, nl_Eighth ),
   Note( nt_D_1, nl_Eighth ),
   Note( nt_C_1, nl_Eighth ),
   Note( nt_D_1, nl_Eighth ),
   
   Note( nt_E_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_F_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   Note( nt_F_1, nl_Quarter ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_C_2, nl_Eighth ),
   Note( nt_C_2, nl_Full ),

   // Refrain
   Note( nt_E_1, nl_Quarter ),
   Note( nt_F_1, nl_Eighth ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_G_1, nl_QuarterDot ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_F_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_C_1, nl_Eighth ),
   Note( nt_C_1, nl_QuarterDot ),
   Note( nt_G_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_F_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   
   Note( nt_E_1, nl_Quarter ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_C_1, nl_Eighth ),
   Note( nt_C_1, nl_QuarterDot ),
   Note( nt_G_1, nl_Eighth ),
   Note( nt_F_1, nl_Eighth ),
   Note( nt_E_1, nl_Eighth ),
   Note( nt_D_1, nl_Eighth ),
   Note( nt_D_1, nl_Eighth ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_C_1, nl_Eighth ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_E_1, nl_Quarter ),
   Note( nt_F_1, nl_Quarter ),
   Note( nt_D_1, nl_Eighth ),
   Note( nt_D_1, nl_Eighth ),
   Note( nt_C_1, nl_Eighth ),
   Note( nt_D_1, nl_Eighth ),
};

static const Song btn6_song(btn6_notes, sizeof(btn6_notes) / sizeof(btn6_notes[0]));

#endif // BTN6_HPP